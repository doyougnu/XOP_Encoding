       AVL trees
            Today
  • AVL Deletes and rotations, then testing 
   your knowledge of these concepts!
  • Before I get into details, I want to show 
   you some animated operations in an 
   AVL tree.
  • I think it’s important to just get the 
   gears turning in your mind.
  • We’ll look at some animations again 
   after we study (some) details.
  • Interactive web applet
            AVL tree
  • Is a binary search tree
  • Has an additional height constraint:
    –For each node x in the tree, Height(x.left) 
     differs from Height(x.right) by at most 1
  • I promise:
    –If you satisfy the height constraint, then 
     the height of the tree is O(lg n).
    –(Proof is easy, but no time! =])
            AVL tree
  • To be an AVL tree, must always:
    –(1) Be a binary search tree
    –(2) Satisfy the height constraint
  • Suppose we start with an AVL tree, then 
    delete as if we’re in a regular BST.
  • Will the tree be an AVL tree after the 
    delete?
    –(1) It will still be a BST…  that’s one part.
    –(2) Will it satisfy the height constraint?
  • (Not covering insert, since you already did in class)
    BST Delete breaks an AVL 
               tree
           7               7
           7               7
               Delete(9)
        4    9          4
        4    9          4
      3               3
      3               3
                         h(left) > 
                        h(right)+1
                       so NOT an AVL 
                          tree!
         Balance factors
  • To check the balance constraint, we 
   have to know the height h of each node
  • Or do we?
  • In fact, we can store balance factors 
   instead.
  • The balance factor bf(x) = h(x.right) – 
   h(x.left)
    –bf(x) values -1, 0, and 1 are allowed.
    –If bf(x) < -1 or bf(x) > 1 then tree is NOT AVL
     Same example with bf(x), 
                  not h(x)
            -1 7                    -2 7
               7                       7
                     Delete(9)
         -14    0  9            -1 4
           4       9               4
      0 3                     0 3
        3                       3
                              bf < -1
                              so NOT an AVL tree!
     What else can BST Delete 
                  break?
           -1 7                 0 -17
              7                     7
                   Delete(3)
        -1 4   0 9           0 -14  0  9
           4     9              4      9
     0  3
        3
   • Balance factors of ancestors…
       Need a new Delete 
           algorithm
  • We are starting to see what our delete 
   algorithm must look like.
  • Goal: if tree is AVL before Delete, then tree 
   is AVL after Delete.
  • Step 1: do BST delete.
    –This maintains the BST property,
     but can BREAK the balance factors of 
     ancestors!
  • Step 2: ifx the balance constraint.
    –Do something that maintains the BST property,
     but ifxes any balance factors that are < -1 or > 
     1.
        Bad balance factors
   • Start with an AVL tree, then do a BST Delete.
   • What bad values can bf(x) take on?
    –Delete can reduce a subtree’s height by 1.
    –So, it might increase or decrease h(x.right) – 
     h(x.left) by 1.
    –So, bf(x) might increase or decrease by 1.
    –This means:
      • if bf(x) = 1 before Delete, it might become 2.  BAD.
                           2 cases
      •                    2 cases
      If bf(x) = -1 before Delete, it might become -2.  BAD.
      • If bf(x) = 0 before Delete, then it is still -1, 0 or 1.  OK.
         Problematic cases for 
                   Delete(a)
          2   x                    -2 x
              x                       x
      h
                     h+2
          a                               a
          a                               a
    • bf(x) = -2 is just symmetric to bf(x) = 
     2.
    • So, we just look at bf(x) = 2.
          Delete(a): 3 subcases for 
                                bf(x)=2
     • Since tree was AVL before, bf(z) = 
        -1, 0 or 1
           Case bf(z) = 0                            
              2    x                                       2    x
                   x                                            x
        Case bf(z) = 1
                    0    z                                        1 z
      h                  z                                            z
             T                                            T
             T1                                           T1
              1                                            1
            a                                            a
            a                                            a
                                                             h T
                                                                 T2
                             T h+1                                2       T
                    T        T                                            T
                    T2
                     2
                             3                                            3
                             3                                            3
          Delete(a): ifnal subcase for 
                                          bf(x)=2
     Case bf(z) = -1: we have 3 subcases.  
     (More details)
      Case bf(y) = 0         Case bf(y) = -1    
           2     x
                 x                              2      x                           2     x
        Case bf(y) = 1                                 x                                 x
                   -1 z                                  -1                                -1
                         z                                     z                                 z
  h      T                                                     z                                 z
         T1                                    T                                 T
           1                                   T1                                T1
                                                1                                 1
      a 0 y                                      -1                                 1
      a           y                         a          y                      a          y
                                            a          y                      a          y
                               T h
                               T                                     T                                 T
                                                                     T                                 T
                               3
                               3                                     3                                 3
                                                                     3                                 3
                                                      h-1 T                         T
                                                            T                       T
                                                             2                       2
            T         T                           T          2                       2        T
       h    T         T                           T                                           T
              2         2                          2                                           2
              2         2                          2         2                       1         2
                                                             2                       1
             1         2                           1                                           2
             1         2                           1                                           2
        Fixing case bf(x) = 2, bf(z) 
     •                               = 0
        We do a single left rotation
     • Preserves the BST property, and ifxes 
        bf(x) = 2
              2    x                                      -1 z
                   x                                           z
                    0    z                           1   x
       h                 z                               x
             T
             T1
              1                                                         T
                                                                        T
                                                                        3
                                                                        3
                                                   T
                                h+1                T1
                             T                      1
                    T        T                                   T
                    T2                                           T2
                      2                                           2
                              3
                              3
        Fixing case bf(x) = 2, bf(z) 
     •                               = 1
        We do a single left rotation (same 
        as last case)
     • Preserves the BST property, and ifxes 
              2    x                                       0   z
                   x                                           z
        bf(x) = 2
                    1    z                           0   x
       h                 z                               x
             T
             T1
              1                                                         T
                                                                        T
                                                                        3
                                                                        3
                h   T                                            T
                    T                              T             T
                      2                            T              2
                      2         h+1                 1             2
                             T                      1
                             T
                              3
                              3
    Interactive AVL Deletes
  • Interactive web applet
  • Video of this applet being used to 
   show most cases for insert / delete
