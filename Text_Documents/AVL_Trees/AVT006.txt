    AVL Trees
     • Motivation: we want to 
       guarantee O(log n) running time 
       on the ifnd/insert/remove 
       operations.
     • Idea: keep the tree balanced 
       after each operation.
     • Solution: AVL (Adelson-Velskii 
       and Landis) trees.
     • AVL tree property: for every 
       node in the tree, the height of 
       the left and right subtrees differs 
       by at most 1.
                 TCSS 342 AVL Trees v1.0  1
                        6
                 4              8
            1       5       7      11
               3          AVL tree
                        6
                 4              8
            1       5       7      11
               3
                         not an AVL tree
             2
                  TCSS 342 AVL Trees v1.0    2
    AVL trees: ifnd, insert
     • AVL tree ifnd is the same as 
       BST ifnd.
     • AVL insert: same as BST insert, 
       except that we might have to 
       “ifx” the AVL tree after an 
       insert.
     • These operations will take time 
       O(d), where d is the depth of 
       the node being found/inserted.
     • What is the maximum height of 
       an n-node AVL tree?
                  TCSS 342 AVL Trees v1.0   3
     AVL tree insert
    •    Let x be the deepest node where 
         an imbalance occurs.
    •    Four cases to consider.  The 
         insertion is in the
        1. left subtree of the left child of x.
        2. right subtree of the left child of x.
        3. left subtree of the right child of x.
        4. right subtree of the right child of x.
    Idea: Cases 1 & 4 are solved by a 
         single rotation.
    Cases 2 & 3 are solved by a double 
         rotation.
                   TCSS 342 AVL Trees v1.0     4
    Single rotation example
                       15
                 5            20
             3      10     17     21
          2    4
       1               15
                3             20
             2     5       17     21
         1       4    10
                 TCSS 342 AVL Trees v1.0  5
     Single rotation in general
                            a    height h+2
                                 before insert
                   b
                                   Z h
       h+1          h   Y
             X                        h  
                                      -1
                 X < b < Y < a < Z
                       b        height h+2
                                after insert
                              a
        h+1   X       h            Z    h
                         Y
                   TCSS 342 AVL Trees v1.0    6
     Cases 2 & 3
                           a    height h+2
                                before insert
                  b
                                  Z h
        h   X
                       Y h+1
                                     h  
                                     -1
                       b
                               a
           h   X
                            h+1     Z h
                        Y
                 single rotation fails
                   TCSS 342 AVL Trees v1.0    7
    Double rotation, step 1
                        15
                  8            17
              4      10     16
           3     6
               5
                        15
                  8            17
              6      10     16
          4
        3     5
                 TCSS 342 AVL Trees v1.0  8
    Double rotation, step 2
                        15
                  8             17
               6     10     16
           4
        3     5
                         15
                 6               17
              4      8       16
           3     5     10
                 TCSS 342 AVL Trees v1.0  9
    Double rotation in general
        height h+2              a
        before insert
                        b
     h                      c                h
     0                                    Z
            h   W             h-1
                       h X        Y
                 W < b <X < c < Y < a < Z
        height h+2          c
        after insert
                    b               a
          h        h        h-1 Y              h
            W         X                    Z
                   TCSS 342 AVL Trees v1.0     10
    Depth of an AVL tree
     Theorem: Any AVL tree with n 
       nodes has height less than
       1.441 log n.
     Proof: Given an n-node AVL tree, 
       we want to ifnd an upper bound 
       on the height of the tree.
       Fix h.  What is the smallest n 
       such that there is an AVL tree of 
       height h with n nodes?
       Let S  be the set of all AVL 
             h
       trees of height h that have as 
       few nodes as possible.
                 TCSS 342 AVL Trees v1.0 11
       Let w  be the number of nodes in 
              h
       any one of these trees.
       w = 1, w  = 2
         0        1
     Suppose T  S , where h  2.  Let 
                      h
       T  and T be T’s left and right 
         L       R 
       subtrees.  Since T has height h, 
       either T  or T  has height h-1.  
                L      R
       Suppose it’s TR.
     By deifnition, both T  and T  are 
                             L       R
       AVL trees.  In fact, T   S      or 
                               R      h-1 
       else it could be replaced by a 
       smaller AVL tree of height h-1 to 
       give an AVL tree of height h that 
       is smaller than T.
                  TCSS 342 AVL Trees v1.0   12
    Similarly, T   S .
                  L     h-2
    Therefore, w  = 1 + w  + w         .
                   h         h-2     h-1 
                                  h
    Claim: For h  0, w     , where 
                           h
        = (1 + 5) / 2  1.6.
    Proof: The proof is by induction 
       on h.
                                      0
       Basis step: h=0.  w0 = 1 =  .
                     h=1.  w  = 2 > 1.
                             1
       Induction step:  Suppose the 
       claim is true for 0  m  h, 
       where h  1.
                  TCSS 342 AVL Trees v1.0  13
     Then
       wh+1 = 1 + wh-1 + wh
        1 + h-1 + h   (by the i.h.)
       = 1 + h-1 (1 + )
       = 1 + h+1               (1+ = 2)
       > h+1
     Thus, the claim is true.
     From the claim, in an n-node AVL 
       tree of height h,
       n  w  h       (from the Claim)
              h 
       h  log n
                  
       = (log n) / (log )
       < 1.441 log n
                  TCSS 342 AVL Trees v1.0  14
    AVL tree: Running times
     • ifnd takes O(log n) time, 
       because height of the tree is 
       always O(log n).
     • insert: O(log n) time because we 
       do a ifnd (O(log n) time), and 
       then we may have to visit every 
       node on the path back to the 
       root, performing up to 2 single 
       rotations (O(1) time each) to ifx 
       the tree.
     • remove: O(log n) time.  Left as 
       an exercise.
                  TCSS 342 AVL Trees v1.0  15
