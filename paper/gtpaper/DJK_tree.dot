// compile to pdf with: dot -Tpdf /path/to/dotfile -o /output/name.pdf

digraph graph_name {
  graph [
    charset = "UTF-8";
    labelloc = "t",
    labeljust = "c",
    margin = 0.2,
    splines = spline,
    ordering = out,
    ranksep = 1.0,
    nodesep = 0.9
  ];

  node [
    fontsize = 16,
    fontcolor = 6,
    fontname = "Migu 1M",
    color = 7,
    fillcolor = 11,
    height = 0.6,
    width = 1.2
  ];

  edge [
    style = solid,
    fontsize = 14,
    labelfloat = true,
    labeldistance = 2.5,
    labelangle = 70,
    arrowhead = none,
  ];

  // node define
  Algorithm [color = red, penwidth = 2.5, style = bold];
  // History2 [label = "History"];
  // Def2 [label = "Definition", style = dotted];

  // leaf define
  // Description [style = dotted];
  // Def [label = "Definition", style = dotted];
  // Def3 [label = "Definition", style = dotted];
  // Math2 [label = "Mathematic", style = dotted];
  // Assu [label = "Abstraction", style = dotted];
  // Code [label = "Code", style = dotted];
  // Lgnd [label = "Legend", style = dotted];
  // Prop [label = "Proposal", style = dotted];

  // InVivo [style = dotted];
  // Definition [style = dotted];
  // Outline [label = "Outline:Meta", style = dotted];
  // C1 [label = "Comment:Caveat", style = dotted];

  // Nodes must be defined in order
  // Algorithm -> History;
  // Algorithm -> Class;



  // edges
  Prp [label = "Property", shape = pentagon];
  Algorithm -> Prp;

  // Def2 [label = "Definition", style = dotted];
  // Math [label = "Mathematic", style = dotted];
  // Property -> Def2;
  // Property -> Math;
  Prp -> Dummy1;
  Dummy1 [label = "⋮" , color="white" , fontsize=30];
  // Algorithm -> Problem;
  // Dummy2 [label = "⋮" , color="white" , fontsize=30];
  // // Problem -> Def3;
  // Problem -> Dummy2;
  // Problem -> Math2;

  Op [label = "Operation", shape = pentagon];
  Algorithm -> Op;
  Sum [label = "Summary", shape = box];
  Op -> Sum;
  Code1 [label = "Code", shape = box];
  Algorithm -> Code1;
  // Operation -> Lgnd;
  // Cases [label = "Cases", style = dotted];
  // Prf [label = "Proof", style = dotted];
  // BCase [label = "Base Case", style = dotted];
  // Desc2 [label = "Description", style = dotted];
  // Math3 [label = "Mathematic", style = dotted];
  // Operation -> Prf;
  // Operation -> BCase;
  // Operation -> Desc2;
  // Operation -> Math3;
  // Prp [label = "Proposal", style = dotted];
  // Operation -> Prp;
  // Desc3 [label = "Description", style = dotted];
  // Operation -> Desc3;
  // Cases2 [label = "Cases", style = dotted];
  // Desc4 [label = "Description", style = dotted];
  // Math4 [label = "Mathematic", style = dotted];
  // Operation -> Cases2;
  // Operation -> Desc4;
  // Operation -> Math4;
  // Conc [label = "Conclusion", style = dotted];
  // Operation -> Conc;
  // Desc5 [label = "Description", style = dotted];
  // Operation -> Desc5;
  // Ctn2 [label = "Cartoon", style = dotted];
  // Operation -> Ctn2;
  // Prop [label = "Proposal", style = dotted];
  // Operation -> Prop;
  // Desc6 [label = "Description", style = dotted];
  // Prf2 [label = "Proof", style = dotted];
  // Operation -> Desc6;
  // Operation -> Prf2;
  Compl [label = "Complexity", shape = pentagon];
  Algorithm -> Compl;
  Deri [label =<Derivation<BR/><I>Mathematic</I>>, shape = box];
  Compl -> Deri;
  // Desc7 [label = "Description", style = dotted];
  // Complexity -> Desc7;
  Impl1 [label = "Implementation\nRelated"];
  Impl1 [label =<Implmentation<BR/><I>Related</I>>, shape = pentagon];
  Compl -> Impl1;
  Impl [label = "Implementation"];
  Impl [label =<Implmentation>, shape = pentagon];
  Compl -> Impl;
  // Desc8 [label = "Description", shape = box];
  // Impl -> Desc8;
}
